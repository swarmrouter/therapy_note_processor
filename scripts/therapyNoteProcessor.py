# Import the required modules
import sys
import os
import yaml
import fitz # PyMuPDF module
import openai # OpenAI API module
import azure.openai # Azure OpenAI Service module

# Define the constants
CONFIG_FILE = "therapy_notes_processor.yaml" # The name of the configuration file
SYSTEM_PROMPT = "system_prompt" # The key for the system prompt in the configuration file
SESSION_PROMPT = "session_prompt" # The key for the session prompt in the configuration file
INPUT_DIR = "input_dir" # The key for the input directory in the configuration file
OUTPUT_DIR = "output_dir" # The key for the output directory in the configuration file
SESSION_FILE = "session_file" # The key for the session file in the configuration file
TSOAP_OUTFILE = "tsoap_outfile" # The key for the output file in the configuration file
EMAIL_DOC = "email_doc" # The key for the email document in the configuration file
SOAP_DOC = "soap_doc" # The key for the SOAP document in the configuration file
SERVICE = "service" # The key for the service type in the configuration file
OPENAI = "openai" # The value for the OpenAI service type
AZURE = "azure" # The value for the Azure OpenAI service type
API_KEY = "api_key" # The key for the API key in the configuration file
ORG_ID = "org_id" # The key for the organization ID in the configuration file
ENGINE = "engine" # The key for the engine name in the configuration file
TEMPERATURE = "temperature" # The key for the temperature parameter in the configuration file
TOP_P = "top_p" # The key for the top_p parameter in the configuration file
FREQUENCY_PENALTY = "frequency_penalty" # The key for the frequency_penalty parameter in the configuration file
PRESENCE_PENALTY = "presence_penalty" # The key for the presence_penalty parameter in the configuration file
MAX_TOKENS = "max_tokens" # The key for the max_tokens parameter in the configuration file
STOP = "stop" # The key for the stop parameter in the configuration file

# Define the classes
class SessionNote:
    """A class to represent a session note."""

    def __init__(self, file_name, file_path, note_text):
        """Initialize the attributes of a session note."""
        self.file_name = file_name # The name of the file containing the session note
        self.file_path = file_path # The path of the file containing the session note
        self.note_text = note_text # The text of the session note

    def __str__(self):
        """Return a string representation of a session note."""
        return f"Session note from file {self.file_name}:\n{self.note_text}"

class TSOAPNote:
    """A class to represent a TSOAP note."""

    def __init__(self, file_name, file_path, email_doc, soap_doc):
        """Initialize the attributes of a TSOAP note."""
        self.file_name = file_name # The name of the file containing the TSOAP note
        self.file_path = file_path # The path of the file containing the TSOAP note
        self.email_doc = email_doc # The email document generated by the AI service
        self.soap_doc = soap_doc # The SOAP document generated by the AI service

    def __str__(self):
        """Return a string representation of a TSOAP note."""
        return f"TSOAP note to file {self.file_name}:\n\n{self.email_doc}\n\n{self.soap_doc}"

class AIService:
    """A class to represent an AI service."""

    def __init__(self, service_type, api_key, org_id, engine, temperature, top_p, frequency_penalty, presence_penalty, max_tokens, stop):
        """Initialize the attributes of an AI service."""
        self.service_type = service_type # The type of the AI service (OpenAI or Azure)
        self.api_key = api_key # The API key for the AI service
        self.org_id = org_id # The organization ID for the AI service
        self.engine = engine # The engine name for the AI service
        self.temperature = temperature # The temperature parameter for the AI service
        self.top_p = top_p # The top_p parameter for the AI service
        self.frequency_penalty = frequency_penalty # The frequency_penalty parameter for the AI service
        self.presence_penalty = presence_penalty # The presence_penalty parameter for the AI service
        self.max_tokens = max_tokens # The max_tokens parameter for the AI service
        self.stop = stop # The stop parameter for the AI service

    def generate_tsoap_note(self, session_note):
        """Generate a TSOAP note from a session note using the AI service."""
        # Create the system prompt
        system_prompt = config[SYSTEM_PROMPT]
        # Create the session prompt
        session_prompt = config[SESSION_PROMPT].format(session_note=session_note.note_text)
        # Create the full prompt
        full_prompt = system_prompt + session_prompt
        # Check the service type
        if self.service_type == OPENAI:
            # Use the OpenAI API
            # Set the API key
            openai.api_key = self.api_key
            # Set the organization ID
            openai.organization = self.org_id
            # Create the completion
            completion = openai.Completion.create(
                engine=self.engine,
                prompt=full_prompt,
                temperature=self.temperature,
                top_p=self.top_p,
                frequency_penalty=self.frequency_penalty,
                presence_penalty=self.presence_penalty,
                max_tokens=self.max_tokens,
                stop=self.stop
            )
            # Get the response text
            response = completion["choices"][0]["text"]
        elif self.service_type == AZURE:
            # Use the Azure OpenAI Service
            # Set the configuration
            configuration = azure.openai.Configuration(
                api_key=self.api_key,
                organization=self.org_id
            )
            # Create the API client
            api_client = azure.openai.OpenAIApi(configuration)
            # Create the completion
            completion = api_client.create_completion(
                engine=self.engine,
                prompt=full_prompt,
                temperature=self.temperature,
                top_p=self.top_p,
                frequency_penalty=self.frequency_penalty,
                presence_penalty=self.presence_penalty,
                max_tokens=self.max_tokens,
                stop=self.stop
            )
            # Get the response text
            response = completion["choices"][0]["text"]
        else:
            # Invalid service type
            raise ValueError(f"Invalid service type: {self.service_type}")
        # Split the response into email and SOAP documents
        email_doc, soap_doc = response.split("\n\n")
        # Create a TSOAP note object
        tsoap_note = TSOAPNote(
            file_name=config[TSOAP_OUTFILE].format(session_file=session_note.file_name),
            file_path=os.path.join(config[OUTPUT_DIR], config[TSOAP_OUTFILE].format(session_file=session_note.file_name)),
            email_doc=email_doc,
            soap_doc=soap_doc
        )
        # Return the TSOAP note object
        return tsoap_note

# Define the functions
def load_config():
    """Load the configuration from the YAML file."""
    # Open the YAML file
    with open(CONFIG_FILE, "r") as f:
        # Load the configuration as a dictionary
        config = yaml.safe_load(f)
    # Return the configuration
    return config

def extract_session_notes():
    """Extract the session notes from the PDF files in the input directory."""
    # Create an empty list to store the session notes
    session_notes = []
    # Loop through the files in the input directory
    for file_name in os.listdir(config[INPUT_DIR]):
        # Check if the file is a PDF file
        if file_name.endswith(".pdf"):
            # Create the file path
            file_path = os.path.join(config[INPUT_DIR], file_name)
            # Open the PDF file
            pdf = fitz.open(file_path)
            # Extract the text from the first page
            note_text = pdf[0].get_text()
            # Strip the whitespace from the text
            note_text = note_text.strip()
            # Close the PDF file
            pdf.close()
            # Create a session note object
            session_note = SessionNote(
                file_name=file_name,
                file_path=file_path,
                note_text=note_text
            )
            # Append the session note object to the list
            session_notes.append(session_note)
    # Return the list of session notes
    return session_notes

def write_tsoap_notes(tsoap_notes):
    """Write the TSOAP notes to the output files in the output directory."""
    # Loop through the TSOAP notes
    for tsoap_note in tsoap_notes:
        # Open the output file
        with open(tsoap_note.file_path, "w") as f:
            # Write the email document
            f.write(config[EMAIL_DOC].format(email_doc=tsoap_note.email_doc))
            # Write a blank line
            f.write("\n")
            # Write the SOAP document
            f.write(config[SOAP_DOC].format(soap_doc=tsoap_note.soap_doc))
        # Print a message
        print(f"TSOAP note written to {tsoap_note.file_path}")

def show_usage():
    """Show the usage of the script."""
    # Print the usage
    print(f"Usage: python {sys.argv[0]}")

# Define the main function
def main():
    """The main function of the script
